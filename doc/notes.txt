
updater arguments:
{
    "id": self.mirrorSite.id,
    "config": self.mirrorSite.cfgDict,
    "state-directory": self.mirrorSite.pluginStateDir,
    "log-directory": logDir,                                    # if metadata.xml contains <need-log-directory>
    "debug-flag": "",
    "country": self.param.mainCfg["country"],
    "location": self.param.mainCfg["location"],
    "run-mode": "init", "update", "maintain",
    "storage-file": {
        ...
    },
    "storage-mariadb": {
        ...
    },
}



advertiser arguments:
{
    "listen-ip": ""
    "temp-directory": ""
    "log-directory": ""
    "mirror-sites": {
        MIRROR-SITE-ID: {
            "config-xml": "",
            "state-directory": "",
            "storage-param": {
                "file": {
                    ...
                },
                "mariadb": {
                    ...
                },
            }
        },
    }
}

storage arguments:
{
    "temp-directory": ""
    "log-directory": ""
    "mirror-sites": {
        MIRROR-SITE-ID: {
            "config-xml": "",
            "state-directory": "",
            "data-directory": "",
        }
    },
}

storage-with-integrated-advertiser arguments:
{
    "listen-ip": ""
    "temp-directory": ""
    "log-directory": ""
    "mirror-sites": {
        MIRROR-SITE-ID: {
            "config-xml": "",
            "state-directory": "",
            "data-directory": "",
        }
    },
}



storage-file
{
    "data-directory": ""
}
storage-mariadb
{
    "port": -1
    "database": ""
}


class Advertiser:

    def __init__(self, param):
        pass

    def dispose(self):
        pass

    def get_access_info(self, mirror_site_id):
        return {
            "url": XXXX,
            "description": XXXX,
        }

    def advertise_mirror_site(self, mirror_site_id):
        pass


class Storage:

    def __init__(self, param):
        pass

    def dispose(self):
        pass

    def get_param(self, mirror_site_id):
        return dict()


class StorageWithIntegratedAdvertiser:

    def __init__(self, param):
        pass

    def dispose(self):
        pass

    def get_param(self, mirror_site_id):
        return dict()

    def get_access_info(self, mirror_site_id):
        return {
            "url": XXXX,
            "description": XXXX,
        }

    def advertise_mirror_site(self, mirror_site_id):
        pass



system log files in mirror-site-log-directory (sandbox can make plugin can't overwrite them):
    updater.log
    updater.log.1
    updater.log.2
    advertiser-XXX.log
    storage-XXX.log
