region_1: {
    country_1: {
        url_1,
        url_2,
        url_3,
    },
    country_2: {
        geolocation_1: {
            url_1,
            url_2,
            url_3,
        },
        geolocation_2: {
            url_1,
            url_2,
            url_3,
        },
    },
}


region:
1. north-america
2. south-america
3. europe
4. austrialia
5. asia
6. middle-east


location type is per contry.







updater arguments:
{
    "id": self.mirrorSite.id,
    "config": self.mirrorSite.cfgDict,
    "state-directory": self.mirrorSite.pluginStateDir,
    "log-directory": logDir,
    "debug-flag": "",
    "country": self.param.mainCfg["country"],
    "location": self.param.mainCfg["location"],
    "run-mode": "init", "update", "maintain",
    "storage-file": {
        ...
    },
    "storage-mariadb": {
        ...
    },
}



advertiser arguments:
{
    "listen-ip": ""
    "tmp-directory": ""
    "log-directory": ""
    "mirror-sites": {
        MIRROR-SITE-ID: {
            "master-directory": "",
            "config-xml": "",
            "storage-param": {
                "file": {
                    ...
                },
                "mariadb": {
                    ...
                },
            }
        },
    }
}

storage arguments:
{
    "mirror-sites": {
        MIRROR-SITE-ID: {
            "plugin-directory": "",
            "master-directory": "",
            "config-xml": "",
        }
    },
}

storage-with-integrated-advertiser arguments:
{
    "listen-ip": ""
    "tmp-directory": ""
    "log-directory": ""
    "mirror-sites": {
        MIRROR-SITE-ID: {
            "plugin-directory": "",
            "master-directory": "",
            "config-xml": "",
            "advertiser-config-xml": "",
        }
    },
}



storage-file
{
    "data-directory": ""
}


class Advertiser:

    def __init__(self, param):
        pass

    @property                   FIXME
    def port(self):
        return self._port

    def dispose(self):
        pass

    def advertise_mirror_site(self, mirror_site_id):
        pass


class Storage:

    def __init__(self, param):
        pass

    def dispose(self):
        pass

    def get_param(self, mirror_site_id):
        return dict()


class StorageWithIntegratedAdvertiser:

    def __init__(self, param):
        pass

    def dispose(self):
        pass

    def get_param(self, mirror_site_id):
        return dict()

    def advertise_mirror_site(self, mirror_site_id):
        pass


tostring(node, encoding="unicode")

